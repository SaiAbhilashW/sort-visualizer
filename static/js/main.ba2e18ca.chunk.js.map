{"version":3,"sources":["components/Header.js","components/ButtonGroupTemplate.js","logic/generateNewArray.js","logic/sleeper.js","logic/bubbleSort.js","logic/quickSort.js","logic/mergeSort.js","logic/insertionSort.js","components/SortTemplate.js","App.js","serviceWorker.js","index.js"],"names":["Header","AppBar","position","color","Toolbar","IconButton","edge","aria-label","Typography","variant","ButtonGroupTemplate","props","classes","this","className","buttonpad","Paper","elevation","Button","disabled","buttonState","togglable","id","buttons","onClick","buttonFunctions","mergeSort","bubbleSort","quickSort","insertionSort","randomizeArray","changeArraySize","Component","withStyles","theme","display","margin","spacing","width","height","generateNewArray","arraySize","newArray","arrayLength","undefined","index","Math","floor","random","sleep","interval","Promise","resolve","setTimeout","waitTime","appArray","a","globalArray","passIndex","length","compareIndex","document","getElementsByClassName","style","backgroundColor","swap","temp","tempHeight","minIndex","maxIndex","partition","j","itr","pivotIndex","pivotValue","i","array","indexOne","indexTwo","low","high","mid","merge","tempArray","push","k","toString","concat","elementToInsert","console","log","SortTemplate","state","arrayList","setState","currentArraySize","bubbleSortFn","quickSortFn","globalArrayTemp","mergeSortFn","insertionSortFn","map","value","barHeight","barWidth","bar","chart","minWidth","border","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yQAqBeA,MAhBf,WACE,OACE,kBAACC,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAM,WAChC,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,KAAK,QAAQH,MAAM,UAAUI,aAAW,QACpD,kBAAC,IAAD,OAEA,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,sB,8ECSFC,E,qKACKC,GAAO,IACFC,EAAWC,KAAKF,MAAhBC,QACR,OACA,yBAAKE,UAAWF,EAAQG,WACxB,kBAACC,EAAA,EAAD,CAAOC,UAAW,GAChB,kBAACC,EAAA,EAAD,CAASC,SAAYN,KAAKF,MAAMS,YAAaC,WAAW,EAAMZ,QAAQ,YAAYN,MAAM,YAAYmB,GAAG,YAAYR,UAAWF,EAAQW,QAC9HC,QAASX,KAAKF,MAAMc,gBAAgBC,WAD5C,cAGA,kBAACR,EAAA,EAAD,CAAQC,SAAYN,KAAKF,MAAMS,YAAaX,QAAQ,YAAYN,MAAM,YAAYmB,GAAG,aAAaR,UAAWF,EAAQW,QAC7GC,QAASX,KAAKF,MAAMc,gBAAgBE,YAD5C,eAGA,kBAACT,EAAA,EAAD,CAAQC,SAAYN,KAAKF,MAAMS,YAAaX,QAAQ,YAAYN,MAAM,YAAYmB,GAAG,YAAYR,UAAWF,EAAQW,QAC5GC,QAASX,KAAKF,MAAMc,gBAAgBG,WAD5C,cAGA,kBAACV,EAAA,EAAD,CAAQC,SAAYN,KAAKF,MAAMS,YAAaX,QAAQ,YAAYN,MAAM,YAAYmB,GAAG,gBAAgBR,UAAWF,EAAQW,QAChHC,QAASX,KAAKF,MAAMc,gBAAgBI,eAD5C,kBAGA,kBAACX,EAAA,EAAD,CAAQC,SAAYN,KAAKF,MAAMS,YAAaX,QAAQ,YAAYN,MAAM,YAAYmB,GAAG,mBAAmBR,UAAWF,EAAQW,QACnHC,QAASX,KAAKF,MAAMc,gBAAgBK,gBAD5C,mBAGA,kBAACZ,EAAA,EAAD,CAAQC,SAAYN,KAAKF,MAAMS,YAAaX,QAAQ,YAAYN,MAAM,YAAYW,UAAWF,EAAQW,QAC7FC,QAASX,KAAKF,MAAMc,gBAAgBM,iBAD5C,qB,GArBwBC,aA8BnBC,eA9CG,SAACC,GAAD,MAAY,CAC1BnB,UAAW,CACToB,QAAS,eAGPC,OAAQF,EAAMG,QAAQ,GACtBC,MAAO,QACPC,OAAQ,SAGZhB,QAAS,CACPa,OAAQF,EAAMG,QAAQ,GACtBF,QAAS,YAkCAF,CAAsBvB,GCzCtB8B,EAVU,SAACC,GAGtB,IAFA,IAAIC,EAAW,GACXC,OAA6BC,GAAbH,GAAuC,SAAbA,EAAwB,IAAM,GACpEI,EAAQ,EAAGA,EAAQF,EAAaE,IACpCH,EAASG,GAASC,KAAKC,MAAuB,IAAhBD,KAAKE,SAAkB,GAEzD,OAAON,GCJIO,EAFD,SAAAC,GAAQ,OAAI,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAQF,OCE9DI,EAAW,CACb,MAAS,GACT,MAAS,GAGP3B,EAAU,uCAAG,WAAO4B,EAAUd,GAAjB,mBAAAe,EAAA,sDACXC,EAAcF,EACVG,EAAY,EAFL,YAEQA,EAAYD,EAAYE,OAAS,GAFzC,iBAGHC,EAAe,EAHZ,YAGeA,EAAeH,EAAYE,OAASD,EAAY,GAH/D,oBAIJE,EAAe,IACdC,SAASC,uBAAuB,uBAAuBF,EAAa,GAAGG,MAAMC,gBAAkB,QAEnGH,SAASC,uBAAuB,uBAAuBF,GAAcG,MAAMC,gBAAkB,QAC1FJ,EAAeH,EAAYE,OAASD,EAAY,IAC/CG,SAASC,uBAAuB,uBAAuBF,EAAa,GAAGG,MAAMC,gBAAkB,WAEhGP,EAAYG,GAAgBH,EAAYG,EAAa,IAXjD,kCAYGK,EAAKR,EAAaG,EAAcnB,GAZnC,QAeJmB,IAAiBH,EAAYE,OAASD,EAAY,IACjDG,SAASC,uBAAuB,uBAAuBL,EAAYE,OAASD,EAAY,GAAGK,MAAMC,gBAAkB,SACnHH,SAASC,uBAAuB,uBAAuBL,EAAYE,OAASD,EAAY,GAAGK,MAAMC,gBAAkB,QAjBhH,QAGkEJ,IAHlE,uBAE4CF,IAF5C,gDAsBRD,GAtBQ,4CAAH,wDAyBVQ,EAAI,uCAAI,WAAOR,EAAaG,EAAcnB,GAAlC,iBAAAe,EAAA,sEACJP,EAAMK,EAASb,IADX,OAENyB,EAAQT,EAAYG,GACxBH,EAAYG,GAAgBH,EAAYG,EAAa,GACrDH,EAAYG,EAAa,GAAKM,EAC1BC,EAAaN,SAASC,uBAAuB,uBAAuBF,GAAcG,MAAMxB,OAC5FsB,SAASC,uBAAuB,uBAAuBF,GAAcG,MAAMxB,OAASsB,SAASC,uBAAuB,uBAAuBF,EAAa,GAAGG,MAAMxB,OACjKsB,SAASC,uBAAuB,uBAAuBF,EAAa,GAAGG,MAAMxB,OAAS4B,EAP5E,2CAAJ,0DAUKxC,ICxCT2B,EAAW,CACb,MAAS,GACT,MAAS,IAGP1B,EAAS,uCAAG,WAAO6B,EAAaW,EAAUC,EAAS5B,GAAvC,eAAAe,EAAA,2DAEXY,EAAYC,GAFD,gCAGAC,EAAUb,EAAYW,EAASC,EAAS5B,GAHxC,cAGV8B,EAHU,gBAIJ3C,EAAU6B,EAAaW,EAAUG,EAAE,EAAE9B,GAJjC,uBAKJb,EAAU6B,EAAac,EAAE,EAAGF,EAAS5B,GALjC,2CAAH,4DAUT6B,EAAS,uCAAI,WAAOb,EAAaW,EAAUC,EAAU5B,GAAxC,uBAAAe,EAAA,sDAEf,IAAQgB,EAAMJ,EAAUI,EAAMH,EAASG,IACnCX,SAASC,uBAAuB,uBAAuBU,GAAKT,MAAMC,gBAAkB,SAExFH,SAASC,uBAAuB,uBAAuBM,GAAUL,MAAMC,gBAAkB,OACzFH,SAASC,uBAAuB,uBAAuBO,GAAUN,MAAMC,gBAAkB,OACrFS,EAAaL,EACbM,EAAajB,EAAYY,GACrBM,EAAIP,EATG,YASOO,EAAIN,GATX,sBAURZ,EAAYkB,GAAKD,GAVT,kCAWDT,EAAKR,EAAakB,EAAGF,EAAWhC,GAX/B,QAYPgC,IAZO,QASoBE,IATpB,wCAgBTV,EAAKR,EAAYgB,EAAWJ,EAAS5B,GAhB5B,QAkBf,IAAQ+B,EAAMJ,EAAUI,GAAOH,EAASG,IACpCX,SAASC,uBAAuB,uBAAuBU,GAAKT,MAAMC,gBAAkB,OAnBzE,yBAqBRS,GArBQ,4CAAJ,4D,SAwBAR,E,oFAAf,WAAoBW,EAAOC,EAAUC,EAASrC,GAA9C,iBAAAe,EAAA,sEAGUP,EAAMK,EAASb,IAHzB,OAIQyB,EAAOU,EAAMC,GACjBD,EAAMC,GAAYD,EAAME,GACxBF,EAAME,GAAYZ,EACdC,EAAaN,SAASC,uBAAuB,uBAAuBe,GAAUd,MAAMxB,OACxFsB,SAASC,uBAAuB,uBAAuBe,GAAUd,MAAMxB,OAASsB,SAASC,uBAAuB,uBAAuBgB,GAAUf,MAAMxB,OACvJsB,SAASC,uBAAuB,uBAAuBgB,GAAUf,MAAMxB,OAAS4B,EATpF,4C,sBAcevC,QCrDT0B,EAAW,CACb,MAAS,GACT,MAAS,GAGP5B,EAAS,uCAAG,WAAO+B,EAAasB,EAAKC,EAAMvC,GAA/B,iBAAAe,EAAA,yDACVyB,EAAMnC,KAAKC,OAAOgC,EAAMC,GAAM,KAC/BD,EAAMC,GAFK,gCAGJtD,EAAU+B,EAAasB,EAAKE,EAAKxC,GAH7B,uBAIJf,EAAU+B,EAAawB,EAAI,EAAED,EAAKvC,GAJ9B,OAKV,IAAQI,EAAQkC,EAAKlC,GAASmC,EAAMnC,IAChCgB,SAASC,uBAAuB,uBAAuBjB,GAAOkB,MAAMC,gBAAkB,QANhF,gBAQJkB,EAAMzB,EAAasB,EAAKE,EAAKD,EAAMvC,GAR/B,2CAAH,4DAYTyC,EAAK,uCAAG,WAAOzB,EAAasB,EAAKE,EAAKD,EAAMvC,GAApC,uBAAAe,EAAA,sDAIV,IAHImB,EAAII,EACJR,EAAIU,EAAI,EACRE,EAAY,GACVR,GAAKM,GAAOV,GAAKS,GAChBvB,EAAYkB,GAAKlB,EAAYc,IAChCY,EAAUC,KAAK3B,EAAYkB,IAC3BA,MAEIQ,EAAUC,KAAK3B,EAAYc,IAC3BA,KAIR,KAAKI,GAAGM,EAAIN,IACRQ,EAAUC,KAAK3B,EAAYkB,IAE/B,KAAKJ,GAAGS,EAAKT,IACTY,EAAUC,KAAK3B,EAAYc,IAG/BI,EAAII,EACIM,EAAI,EAtBF,YAsBKA,EAAIF,EAAUxB,QAtBnB,kCAuBAV,EAAMK,EAASb,IAvBf,QAwBNoB,SAASC,uBAAuB,uBAAuBa,GAAGZ,MAAMxB,QAAuB,EAAb4C,EAAUE,IAAMC,WAAWC,OAAO,MAC5G9B,EAAYkB,GAAKQ,EAAUE,GAC3BV,IA1BM,QAsB0BU,IAtB1B,uBA4BV,IAAQxC,EAAQkC,EAAKlC,GAASmC,EAAMnC,IAChCgB,SAASC,uBAAuB,uBAAuBjB,GAAOkB,MAAMC,gBAAkB,SA7BhF,4CAAH,8DAiCItC,IClDT4B,EAAW,CACb,MAAS,IACT,MAAS,GA6BEzB,EA1BI,uCAAG,WAAO4B,EAAahB,GAApB,uBAAAe,EAAA,sDACdG,EAASF,EAAYE,OACjBD,EAAY,EAFF,YAEKA,EAAYC,GAFjB,iBAGVC,EAAeF,EAAU,EACzB8B,EAAkB/B,EAAYC,GAClC+B,QAAQC,IAAI,kBAAmBF,GAC/B3B,SAASC,uBAAuB,uBAAuBJ,GAAWK,MAAMC,gBAAkB,OAN5E,YAORJ,GAAgB,GAAKH,EAAYG,GAAgB4B,GAPzC,wBAQV3B,SAASC,uBAAuB,uBAAuBF,EAAa,GAAGG,MAAMxB,QAAoC,EAA1BkB,EAAYG,IAAiB0B,WAAWC,OAAO,MAR5H,UASJtC,EAAMK,EAASb,IATX,QAUVgB,EAAYG,EAAa,GAAKH,EAAYG,GAC1CA,IAXU,8BAadH,EAAYG,EAAa,GAAK4B,EAC9B3B,SAASC,uBAAuB,uBAAuBJ,GAAWK,MAAMC,gBAAkB,OAC1FH,SAASC,uBAAuB,uBAAuBF,EAAa,GAAGG,MAAMC,gBAAkB,OAC/FH,SAASC,uBAAuB,uBAAuBF,EAAa,GAAGG,MAAMxB,QAA0B,EAAhBiD,GAAmBF,WAAWC,OAAO,MAhB9G,UAiBRtC,EAAMK,EAASb,GAAW,IAjBlB,QAkBdoB,SAASC,uBAAuB,uBAAuBF,EAAa,GAAGG,MAAMC,gBAAkB,OAlBjF,QAEyBN,IAFzB,uBAqBlB,IAAQb,EAAQ,EAAGA,EAAQc,EAAQd,IAC/BgB,SAASC,uBAAuB,uBAAuBjB,GAAOkB,MAAMC,gBAAkB,SAtBxE,4CAAH,wDCuBb2B,E,kDAEJ,WAAYhF,GAAQ,IAAD,8BACjB,cAAMA,IAQRmB,eAAiB,WACf,EAAKU,iBAAiB,EAAKoD,MAAMnD,YAVhB,EAanBD,iBAAmB,SAACC,GAClBgD,QAAQC,IAAI,eAAiBjD,GAC7B,IAAIoD,EAAYhC,SAASC,uBAAuB,uBAChD,QAAoBlB,IAAjBiD,EAAU,GACX,IAAI,IAAIhD,EAAQ,EAAGA,EAAQgD,EAAUlC,OAAQd,IAC3CgD,EAAUhD,GAAOkB,MAAMC,gBAAkB,OAG7C,EAAK8B,SAAS,CAACrC,YAAajB,EAAiBC,GAAYA,UAAWA,KArBnD,EAwBnBV,gBAAkB,WAChB,IAAIgE,EAAmB,EAAKH,MAAMnD,UAClCgD,QAAQC,IAAIK,GACXA,GAAwC,SAApBA,EAA+D,EAAKvD,iBAAiB,SAAvD,EAAKA,iBAAiB,UA3BxD,EA8BnBwD,aA9BmB,sBA8BJ,sBAAAxC,EAAA,6DACb,EAAKsC,SAAS,CAAC1E,aAAa,IADf,SAEYO,EAAW,EAAKiE,MAAMnC,YAAa,EAAKmC,MAAMnD,WAF1D,cAGb,EAAKqD,SAAS,CAAC1E,aAAa,IAHf,2CA9BI,EAoCnB6E,YApCmB,sBAoCL,4BAAAzC,EAAA,6DACZ,EAAKsC,SAAS,CAAC1E,aAAa,IACxB8E,EAAkB,EAAKN,MAAMnC,YAFrB,SAIN7B,EAAUsE,EAAiB,EAAGA,EAAgBvC,OAAO,EAAG,EAAKiC,MAAMnD,WAJ7D,OAKZgD,QAAQC,IAAI,sBACZD,QAAQC,IAAIQ,GACZ,EAAKJ,SAAS,CAAC1E,aAAa,IAPhB,2CApCK,EA8CnB+E,YA9CmB,sBA8CL,4BAAA3C,EAAA,6DACZ,EAAKsC,SAAS,CAAC1E,aAAa,IACxB8E,EAAkB,EAAKN,MAAMnC,YAFrB,SAGN/B,EAAUwE,EAAgB,EAAEA,EAAgBvC,OAAS,EAAG,EAAKiC,MAAMnD,WAH7D,OAIZgD,QAAQC,IAAIQ,GACZ,EAAKJ,SAAS,CAAC1E,aAAa,IALhB,2CA9CK,EAsDnBgF,gBAtDmB,sBAsDD,4BAAA5C,EAAA,6DAChB,EAAKsC,SAAS,CAAC1E,aAAa,IACxB8E,EAAkB,EAAKN,MAAMnC,YAFjB,SAGV5B,EAAcqE,EAAiB,EAAKN,MAAMnD,WAHhC,OAIhBgD,QAAQC,IAAIQ,GACZ,EAAKJ,SAAS,CAAC1E,aAAa,IALZ,2CAtDC,EA8DnBK,gBAAkB,CAChBK,eAAgB,EAAKA,eACrBH,WAAY,EAAKqE,aACjBpE,UAAW,EAAKqE,YAChBvE,UAAW,EAAKyE,YAChBtE,cAAe,EAAKuE,gBACpBrE,gBAAiB,EAAKA,iBAlEtB,EAAK6D,MAAQ,CACXnC,YAAa,GACbrC,aAAa,EACbqB,UAAW,SALI,E,gEAwEjB5B,KAAK2B,qB,+BAEE,IAAD,OACE5B,EAAYC,KAAKF,MAAjBC,QAEJiF,EAAYhF,KAAK+E,MAAMnC,YAAY4C,KAAI,SAACC,EAAMzD,GAChD,IAAI0D,GAAmB,EAAND,GAAShB,WAAWC,OAAO,MACxCiB,EAAmC,SAAxB,EAAKZ,MAAMnD,UAAuB,OAAS,MAC1D,OAAO,yBAAK3B,UAAWF,EAAQ6F,IAAK1C,MAAO,CAACxB,OAAOgE,EAAWjE,MAAOkE,EAAUxC,gBAAgB,aAEjG,OACE,yBAAKD,MAAO,CAAC5B,QAAQ,iBACnB,yBAAKrB,UAAWF,EAAQ8F,OACxB,kBAAC1F,EAAA,EAAD,CAAOC,UAAW,GAChB,yBAAK8C,MAAO,CAAC3B,OAAO,OAAQD,QAAQ,iBACnC0D,KAoBH,kBAAC,EAAD,CAAqBpE,gBAAmBZ,KAAKY,gBAAiBL,YAAcP,KAAK+E,MAAMxE,mB,GA7GpEY,aAmHZC,eAvIG,SAACC,GAAD,MAAY,CAC5BwE,MAAO,CACLvE,QAAS,eAGPC,OAAQF,EAAMG,QAAQ,GACtBC,MAAO,QACPC,OAAQL,EAAMG,QAAQ,IACtBsE,SAAU,SAIdF,IAAK,CACHzC,gBAAiB,OACjB4C,OAAQ,mBACRzE,QAAS,eACTG,MAAO,UAuHIL,CAAsB0D,GCnItBkB,MAVf,WAEE,OACE,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxD,SAASyD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.ba2e18ca.chunk.js","sourcesContent":["import React from 'react';\r\nimport AssessmentIcon from '@material-ui/icons/Assessment';\r\nimport { Toolbar, Typography, IconButton, AppBar } from '@material-ui/core';\r\n\r\n\r\nfunction Header() {\r\n  return (\r\n    <AppBar position=\"static\" color=\"primary\">\r\n    <Toolbar>\r\n        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n        <AssessmentIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h6\">\r\n        Sort Visualizer\r\n        </Typography>\r\n        {/* <Button color=\"inherit\">Login</Button> */}\r\n    </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport { Paper, Button } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst useStyles = (theme) => ({\r\n    buttonpad: {\r\n      display: 'inline-block',\r\n      // flexWrap: 'wrap',\r\n      // '& > *': {\r\n        margin: theme.spacing(2),\r\n        width: \"200px\",\r\n        height: \"400px\",\r\n      // },\r\n    },\r\n    buttons: {\r\n      margin: theme.spacing(1),\r\n      display: \"block\",\r\n    }\r\n  });\r\n\r\nclass ButtonGroupTemplate extends Component{\r\n    render(props){\r\n        const { classes} = this.props;\r\n        return (\r\n        <div className={classes.buttonpad}>\r\n        <Paper elevation={3}>\r\n          <Button  disabled = {this.props.buttonState} togglable={true} variant=\"contained\" color=\"secondary\" id=\"mergeSort\" className={classes.buttons}\r\n                  onClick={this.props.buttonFunctions.mergeSort}\r\n          >Merge Sort</Button>\r\n          <Button disabled = {this.props.buttonState} variant=\"contained\" color=\"secondary\" id=\"bubbleSort\" className={classes.buttons}\r\n                  onClick={this.props.buttonFunctions.bubbleSort}\r\n          >Bubble Sort</Button>\r\n          <Button disabled = {this.props.buttonState} variant=\"contained\" color=\"secondary\" id=\"quickSort\" className={classes.buttons}\r\n                  onClick={this.props.buttonFunctions.quickSort}\r\n          >Quick Sort</Button>\r\n          <Button disabled = {this.props.buttonState} variant=\"contained\" color=\"secondary\" id=\"insertionSort\" className={classes.buttons}\r\n                  onClick={this.props.buttonFunctions.insertionSort}\r\n          >Insertion Sort</Button>\r\n          <Button disabled = {this.props.buttonState} variant=\"contained\" color=\"secondary\" id=\"generateNewArray\" className={classes.buttons} \r\n                  onClick={this.props.buttonFunctions.randomizeArray}\r\n          >Randomize Array</Button>\r\n          <Button disabled = {this.props.buttonState} variant=\"contained\" color=\"secondary\" className={classes.buttons}\r\n                  onClick={this.props.buttonFunctions.changeArraySize}\r\n          >Change size</Button>\r\n        </Paper>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(useStyles)(ButtonGroupTemplate);","const generateNewArray = (arraySize) => {\r\n    let newArray = [];\r\n    let arrayLength = ((arraySize == undefined || arraySize == \"large\") ? 200 : 50);\r\n    for(let index = 0; index < arrayLength; index++){\r\n        newArray[index] = Math.floor((Math.random() * 100) + 1);\r\n    }\r\n    return newArray;\r\n    // [10,20,59,16,80,33];\r\n}\r\n\r\nexport default generateNewArray;","const sleep = interval => new Promise(resolve => setTimeout(resolve,interval));\r\n\r\nexport default sleep;\r\n","import sleep from './sleeper';\r\n\r\nconst waitTime = {\r\n    \"small\": 30,\r\n    \"large\": 1,\r\n}\r\n\r\nconst bubbleSort = async (appArray, arraySize) => {\r\n    let globalArray = appArray;\r\n    for(let passIndex = 0; passIndex < globalArray.length - 1; passIndex++){\r\n        for(let compareIndex = 0; compareIndex < globalArray.length - passIndex - 1; compareIndex++){\r\n            if(compareIndex > 0){\r\n                document.getElementsByClassName(\"SortTemplate-bar-96\")[compareIndex-1].style.backgroundColor = \"pink\";\r\n            }\r\n            document.getElementsByClassName(\"SortTemplate-bar-96\")[compareIndex].style.backgroundColor = \"green\";\r\n            if(compareIndex < globalArray.length - passIndex - 1){\r\n                document.getElementsByClassName(\"SortTemplate-bar-96\")[compareIndex+1].style.backgroundColor = \"green\";                        \r\n            }\r\n            if(globalArray[compareIndex] > globalArray[compareIndex+1]){\r\n                await swap(globalArray, compareIndex, arraySize);\r\n            }\r\n            //fix first element not changing color + turquoise sometimes showing in unsorted elements \r\n            if(compareIndex === globalArray.length - passIndex - 2){\r\n                document.getElementsByClassName(\"SortTemplate-bar-96\")[globalArray.length - passIndex - 1].style.backgroundColor = \"silver\";   \r\n                document.getElementsByClassName(\"SortTemplate-bar-96\")[globalArray.length - passIndex - 2].style.backgroundColor = \"pink\";        \r\n            }\r\n        }\r\n    }\r\n    // console.log(globalArray);\r\n    return globalArray;\r\n}\r\n\r\nconst swap =  async (globalArray, compareIndex, arraySize) => {\r\n    await sleep(waitTime[arraySize]);\r\n    let temp =  globalArray[compareIndex];\r\n    globalArray[compareIndex] = globalArray[compareIndex+1];\r\n    globalArray[compareIndex+1] = temp;\r\n    let tempHeight = document.getElementsByClassName(\"SortTemplate-bar-96\")[compareIndex].style.height;\r\n    document.getElementsByClassName(\"SortTemplate-bar-96\")[compareIndex].style.height = document.getElementsByClassName(\"SortTemplate-bar-96\")[compareIndex+1].style.height;\r\n    document.getElementsByClassName(\"SortTemplate-bar-96\")[compareIndex+1].style.height = tempHeight;\r\n}\r\n\r\nexport default bubbleSort;","import sleep from './sleeper';\r\n\r\nconst waitTime = {\r\n    \"small\": 50,\r\n    \"large\": 30,\r\n}\r\n\r\nconst quickSort = async (globalArray, minIndex, maxIndex,arraySize) => {\r\n    let j; \r\n    if(minIndex <  maxIndex){\r\n        j = await partition(globalArray,minIndex,maxIndex,arraySize);\r\n        await quickSort(globalArray, minIndex, j-1,arraySize);\r\n        await quickSort(globalArray, j+1, maxIndex,arraySize);\r\n        // await Promise.all([quickSort(globalArray, minIndex, j,interval), quickSort(globalArray, j+1, maxIndex,interval)]); \r\n    }\r\n} \r\n\r\nconst partition =  async (globalArray, minIndex, maxIndex, arraySize) => {\r\n    // console.log(\"hello\");\r\n    for(let itr = minIndex; itr < maxIndex;itr++){\r\n        document.getElementsByClassName(\"SortTemplate-bar-96\")[itr].style.backgroundColor = \"yellow\";\r\n    }\r\n    document.getElementsByClassName(\"SortTemplate-bar-96\")[minIndex].style.backgroundColor = \"blue\";\r\n    document.getElementsByClassName(\"SortTemplate-bar-96\")[maxIndex].style.backgroundColor = \"blue\";\r\n    let pivotIndex = minIndex;\r\n    let pivotValue = globalArray[maxIndex];\r\n    for(let i = minIndex; i < maxIndex;i++){\r\n        if(globalArray[i] < pivotValue){\r\n            await swap(globalArray, i, pivotIndex,arraySize);\r\n            pivotIndex++;\r\n        }\r\n        // console.log(pivotIndex);\r\n    }\r\n    await swap(globalArray,pivotIndex,maxIndex,arraySize);  \r\n    // document.getElementsByClassName(\"SortTemplate-bar-96\")[pivotIndex].style.backgroundColor = \"grey\";\r\n    for(let itr = minIndex; itr <= maxIndex;itr++){\r\n        document.getElementsByClassName(\"SortTemplate-bar-96\")[itr].style.backgroundColor = \"pink\";\r\n    }\r\n    return pivotIndex;\r\n}\r\n\r\nasync function swap(array, indexOne, indexTwo,arraySize){\r\n    // document.getElementsByClassName(\"SortTemplate-bar-96\")[indexOne].style.backgroundColor = \"green\";\r\n    // document.getElementsByClassName(\"SortTemplate-bar-96\")[indexTwo].style.backgroundColor = \"green\";\r\n    await sleep(waitTime[arraySize]);\r\n    let temp = array[indexOne];\r\n    array[indexOne] = array[indexTwo];\r\n    array[indexTwo] = temp;\r\n    let tempHeight = document.getElementsByClassName(\"SortTemplate-bar-96\")[indexOne].style.height;\r\n    document.getElementsByClassName(\"SortTemplate-bar-96\")[indexOne].style.height = document.getElementsByClassName(\"SortTemplate-bar-96\")[indexTwo].style.height;\r\n    document.getElementsByClassName(\"SortTemplate-bar-96\")[indexTwo].style.height = tempHeight;\r\n    // document.getElementsByClassName(\"SortTemplate-bar-96\")[indexOne].style.backgroundColor = \"pink\";\r\n    // document.getElementsByClassName(\"SortTemplate-bar-96\")[indexTwo].style.backgroundColor = \"pink\";\r\n}\r\n\r\nexport default quickSort;","import sleep from './sleeper';\r\n\r\nconst waitTime = {\r\n    \"small\": 50,\r\n    \"large\": 5,\r\n}\r\n\r\nconst mergeSort = async (globalArray, low, high, arraySize) => {\r\n    let mid = Math.floor((low + high)/2);\r\n    if(low < high){\r\n        await mergeSort(globalArray, low, mid, arraySize);\r\n        await mergeSort(globalArray, mid+1,high,arraySize);\r\n        for(let index = low; index <= high; index++){\r\n            document.getElementsByClassName(\"SortTemplate-bar-96\")[index].style.backgroundColor = \"green\";\r\n        }\r\n        await merge(globalArray, low, mid, high, arraySize);\r\n    }\r\n}\r\n\r\nconst merge = async (globalArray, low, mid, high, arraySize) => {\r\n    let i = low;\r\n    let j = mid+1;\r\n    let tempArray = [];\r\n    while(i <= mid && j <= high){\r\n        if(globalArray[i] < globalArray[j]){\r\n        tempArray.push(globalArray[i]);\r\n        i++;\r\n        } else {\r\n            tempArray.push(globalArray[j]);\r\n            j++;\r\n        }\r\n    }\r\n\r\n    for(;i<=mid;i++){\r\n        tempArray.push(globalArray[i]);\r\n    }\r\n    for(;j<=high;j++){\r\n        tempArray.push(globalArray[j]);\r\n    }\r\n\r\n    i = low;\r\n    for(let k = 0; k < tempArray.length;k++){\r\n        await sleep(waitTime[arraySize]);\r\n        document.getElementsByClassName(\"SortTemplate-bar-96\")[i].style.height = (tempArray[k]*3).toString().concat(\"px\");;\r\n        globalArray[i] = tempArray[k];\r\n        i++;\r\n    }\r\n    for(let index = low; index <= high; index++){\r\n        document.getElementsByClassName(\"SortTemplate-bar-96\")[index].style.backgroundColor = \"silver\";\r\n    }\r\n}\r\n\r\nexport default mergeSort;\r\n\r\n// after making tempArray sorted, update the global array \r\n\r\n//what do you choose to swap\r\n\r\n//you pick an element from index p and q in old array and place one of them in position r\r\n//how to show in animation\r\n// make a function passing it the element and index where it is supposed to go\r\n// change the div height in that function and make it wait for a second\r\n\r\n// how to show which subarray you are targetting\r\n// color the divs after the mergesort has happened on the subarrays\r\n// so that root array as a whole gets colored the last","import sleep from './sleeper';\r\n\r\nconst waitTime = {\r\n    \"small\": 100,\r\n    \"large\": 5,\r\n}\r\n\r\nconst insertionSort = async (globalArray, arraySize) => {\r\n    let length = globalArray.length;\r\n    for(let passIndex = 1; passIndex < length; passIndex++){\r\n        let compareIndex = passIndex-1;\r\n        let elementToInsert = globalArray[passIndex];\r\n        console.log(\"elementToInsert\", elementToInsert);\r\n        document.getElementsByClassName(\"SortTemplate-bar-96\")[passIndex].style.backgroundColor = \"blue\";\r\n        while(compareIndex > -1 && globalArray[compareIndex] > elementToInsert){\r\n            document.getElementsByClassName(\"SortTemplate-bar-96\")[compareIndex+1].style.height = (globalArray[compareIndex]*3).toString().concat(\"px\");\r\n            await sleep(waitTime[arraySize]);\r\n            globalArray[compareIndex+1] = globalArray[compareIndex];\r\n            compareIndex--;\r\n        }\r\n        globalArray[compareIndex+1] = elementToInsert;\r\n        document.getElementsByClassName(\"SortTemplate-bar-96\")[passIndex].style.backgroundColor = \"pink\";\r\n        document.getElementsByClassName(\"SortTemplate-bar-96\")[compareIndex+1].style.backgroundColor = \"blue\";\r\n        document.getElementsByClassName(\"SortTemplate-bar-96\")[compareIndex+1].style.height = (elementToInsert*3).toString().concat(\"px\");\r\n        await sleep(waitTime[arraySize]+10);\r\n        document.getElementsByClassName(\"SortTemplate-bar-96\")[compareIndex+1].style.backgroundColor = \"pink\";\r\n    }\r\n\r\n    for(let index = 0; index < length; index++){\r\n        document.getElementsByClassName(\"SortTemplate-bar-96\")[index].style.backgroundColor = \"silver\";    \r\n    }\r\n}\r\n\r\nexport default insertionSort;","import React, { Component} from 'react';\r\nimport { Paper } from '@material-ui/core';\r\nimport ButtonGroupTemplate from './ButtonGroupTemplate';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport generateNewArray from '../logic/generateNewArray'; \r\nimport bubbleSort from '../logic/bubbleSort';\r\nimport quickSort from '../logic/quickSort';\r\nimport mergeSort from '../logic/mergeSort';\r\nimport insertionSort from '../logic/insertionSort';\r\n\r\nconst useStyles = (theme) => ({\r\n  chart: {\r\n    display: 'inline-block',\r\n    // flexWrap: 'wrap',\r\n    // '& > *': {\r\n      margin: theme.spacing(2),\r\n      width: \"870px\",\r\n      height: theme.spacing(50),\r\n      minWidth: \"500px\",\r\n      // backgroundColor: \"black\",\r\n    // },\r\n  },\r\n  bar: {\r\n    backgroundColor: \"pink\",\r\n    border: \"1px solid silver\",\r\n    display: \"inline-block\",\r\n    width: \"2px\",\r\n  }\r\n});\r\n\r\nclass SortTemplate extends Component{\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      globalArray: [],\r\n      buttonState: false,\r\n      arraySize: \"large\",\r\n    };\r\n  }\r\n\r\n  randomizeArray = () => {\r\n    this.generateNewArray(this.state.arraySize);\r\n  }\r\n\r\n  generateNewArray = (arraySize) => {\r\n    console.log(\"arraySize : \" + arraySize);\r\n    let arrayList = document.getElementsByClassName(\"SortTemplate-bar-96\");\r\n    if(arrayList[0] !== undefined){\r\n      for(let index = 0; index < arrayList.length; index++){\r\n        arrayList[index].style.backgroundColor = \"pink\";\r\n      }\r\n    }\r\n    this.setState({globalArray: generateNewArray(arraySize), arraySize: arraySize});\r\n  }\r\n\r\n  changeArraySize = () => {\r\n    let currentArraySize = this.state.arraySize;\r\n    console.log(currentArraySize);\r\n    !currentArraySize || currentArraySize == \"large\"?  this.generateNewArray(\"small\") : this.generateNewArray(\"large\");\r\n  }\r\n\r\n  bubbleSortFn = async () => {\r\n    this.setState({buttonState: true});\r\n    let sortedArray =  await bubbleSort(this.state.globalArray, this.state.arraySize);\r\n    this.setState({buttonState: false});\r\n  }\r\n\r\n  quickSortFn = async () => {\r\n    this.setState({buttonState: true});\r\n    let globalArrayTemp = this.state.globalArray;\r\n    // globalArrayTemp.push(101);  \r\n    await quickSort(globalArrayTemp, 0, globalArrayTemp.length-1, this.state.arraySize);\r\n    console.log(\"outside quick sort\");\r\n    console.log(globalArrayTemp);\r\n    this.setState({buttonState: false});\r\n  }\r\n\r\n  mergeSortFn = async () => {\r\n    this.setState({buttonState: true});\r\n    let globalArrayTemp = this.state.globalArray;\r\n    await mergeSort(globalArrayTemp,0,globalArrayTemp.length - 1, this.state.arraySize);\r\n    console.log(globalArrayTemp);\r\n    this.setState({buttonState: false});\r\n  }\r\n\r\n  insertionSortFn = async () => {\r\n    this.setState({buttonState: true});\r\n    let globalArrayTemp = this.state.globalArray;\r\n    await insertionSort(globalArrayTemp, this.state.arraySize);\r\n    console.log(globalArrayTemp);\r\n    this.setState({buttonState: false});\r\n  }\r\n\r\n  buttonFunctions = {\r\n    randomizeArray: this.randomizeArray,\r\n    bubbleSort: this.bubbleSortFn,\r\n    quickSort: this.quickSortFn,\r\n    mergeSort: this.mergeSortFn,\r\n    insertionSort: this.insertionSortFn,\r\n    changeArraySize: this.changeArraySize,\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.generateNewArray();\r\n  }\r\n  render(){\r\n    const { classes } = this.props;\r\n    // t classes.bar.width = \"5px\" : classes.bar.width = \"2px\";\r\n    let arrayList = this.state.globalArray.map((value,index) => {\r\n      let barHeight = (value*3).toString().concat(\"px\");\r\n      let barWidth = this.state.arraySize == \"small\" ? \"10px\" : \"2px\";\r\n      return <div className={classes.bar} style={{height:barHeight, width: barWidth, backgroundColor:\"pink\"}}></div>\r\n    });\r\n    return (\r\n      <div style={{display:\"inline-block\"}}>\r\n        <div className={classes.chart}>\r\n        <Paper elevation={3} >\r\n          <div style={{margin:\"30px\", display:\"inline-block\"}}>\r\n          {arrayList}\r\n          </div>\r\n          {/* <div style={{display:\"inline-block\", width: \"400px\", height: \"400px\", margin:\"25px\"}}>\r\n          {/* <div className={classes.bar} style={{height:(50*3).toString().concat(\"px\"),backgroundColor:\"pink\"}}></div> */}\r\n          {/* <Paper elevation={3}> */}\r\n            {/* mergeSort(array, low, high) {\"{\"}\r\n            <br></br>\r\n                mid = (low + high)/2;<br></br>\r\n                  mergeSort(array,low,mid);<br></br>\r\n              mergeSort(array,mid+1,high);<br></br>\r\n              merge(array,low,mid,high);<br></br>\r\n            } */}\r\n            {/* <iframe width=\"420\" height=\"315\"\r\n            src=\"https://www.youtube.com/embed/ywWBy6J5gz8\">\r\n            </iframe> */}\r\n\r\n          {/* /</Paper> \r\n          </div> */}\r\n        </Paper>\r\n        </div>\r\n        <ButtonGroupTemplate buttonFunctions = {this.buttonFunctions} buttonState= {this.state.buttonState}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(useStyles)(SortTemplate);\r\n","import React from 'react';\nimport Header from'./components/Header';\nimport SortTemplate from './components/SortTemplate';\n\nfunction App() {\n\n  return (\n    <div>\n        <Header/> \n        <SortTemplate/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}